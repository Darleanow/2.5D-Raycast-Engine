<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="_camera_8cpp" kind="file" language="C++">
    <compoundname>Camera.cpp</compoundname>
    <includes refid="_camera_8hpp" local="yes">Camera.hpp</includes>
    <includes local="no">cmath</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="1">
        <label>src/Camera.cpp</label>
        <link refid="_camera_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Camera.hpp</label>
        <link refid="_camera_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Map.hpp</label>
        <link refid="_map_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>constants.hpp</label>
        <link refid="constants_8hpp_source"/>
      </node>
      <node id="4">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="3">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
<para>Implementation of the camera class for a 2.5D raycasting engine. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Camera.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="classcamera_1a3d8bc3e83cdc778ca84d125fe78df2e0" refkind="member"><highlight class="normal"><ref refid="classcamera_1a3d8bc3e83cdc778ca84d125fe78df2e0" kindref="member">camera::camera</ref>(sf::RenderWindow&amp;<sp/>renderWindow,<sp/><ref refid="classmap" kindref="compound">map</ref>&amp;<sp/>Map)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_renderWindow(renderWindow),<sp/>m_map(Map)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a88bbde1475bca637d3ab168be2e4937c" kindref="member">m_radius</ref><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a1b7c318e23591214448c37582007b720" kindref="member">m_camera</ref>.setRadius(<ref refid="classcamera_1a88bbde1475bca637d3ab168be2e4937c" kindref="member">m_radius</ref>);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a1b7c318e23591214448c37582007b720" kindref="member">m_camera</ref>.setFillColor(sf::Color(0,<sp/>255,<sp/>0));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a1b7c318e23591214448c37582007b720" kindref="member">m_camera</ref>.setOrigin(sf::Vector2f(<ref refid="classcamera_1a88bbde1475bca637d3ab168be2e4937c" kindref="member">m_radius</ref>,<sp/><ref refid="classcamera_1a88bbde1475bca637d3ab168be2e4937c" kindref="member">m_radius</ref>));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a7772c72c2a9b104afe444d7fa96aa30b" kindref="member">m_speedMove</ref><sp/>=<sp/>150.0f;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1aef1698bab1fa18359f60c5eeff76618a" kindref="member">m_speedAngle</ref><sp/>=<sp/>100.0f;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a947d9a37d16b0c95ac2db69e504a7b3c" kindref="member">m_position</ref><sp/>=<sp/>{128,<sp/>128};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a49eff598e2a5120291be6f2517557b7f" kindref="member">m_fov</ref><sp/>=<sp/>60;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a91d570ba05593c129d7a249a84c05610" kindref="member">m_rayLength</ref><sp/>=<sp/>800;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a8a34963e75da04104e8f1932c6956301" kindref="member">m_angle</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1ad20d11e2cb7cb8d3687556405bd1bf46" kindref="member">m_pitch</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>SCREENWIDTH;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>sf::VertexArray<sp/>ray(sf::Lines,<sp/>2);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>ray[0].color<sp/>=<sp/>sf::Color::Red;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>ray[1].color<sp/>=<sp/>sf::Color::Red;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcamera_1a4fc22d5692dec58b1afe6623273ef15e" kindref="member">m_vecRays</ref>.push_back(ray);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcamera_1a0eb2a385a0b4a41dae1249bf7507bb84" kindref="member">m_vecDistances</ref>.push_back(0.0f);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a8f8f8ab3c361b210b7e89e1400df5b72" kindref="member">sinTable</ref>.resize(SCREENWIDTH);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1ab549fe43185366dd9c392de8c55751e0" kindref="member">cosTable</ref>.resize(SCREENWIDTH);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>SCREENWIDTH;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rayAngle<sp/>=<sp/><ref refid="classcamera_1a8a34963e75da04104e8f1932c6956301" kindref="member">m_angle</ref><sp/>+<sp/><ref refid="classcamera_1a49eff598e2a5120291be6f2517557b7f" kindref="member">m_fov</ref><sp/>/<sp/>2.0f<sp/>-<sp/>(i<sp/>*<sp/><ref refid="classcamera_1a49eff598e2a5120291be6f2517557b7f" kindref="member">m_fov</ref>)<sp/>/<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)SCREENWIDTH;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcamera_1a8f8f8ab3c361b210b7e89e1400df5b72" kindref="member">sinTable</ref>[i]<sp/>=<sp/><ref refid="classcamera_1a16579906fa90ac60ee13cb547e300f44" kindref="member">dSin</ref>(rayAngle);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcamera_1ab549fe43185366dd9c392de8c55751e0" kindref="member">cosTable</ref>[i]<sp/>=<sp/><ref refid="classcamera_1a67459e8e14b87a38e09be38a1c2a81cb" kindref="member">dCos</ref>(rayAngle);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classcamera_1a3ed796488a936f45bbcd5da7e532988a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcamera_1a3ed796488a936f45bbcd5da7e532988a" kindref="member">camera::draw3D</ref>()<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sliceWidth<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SCREENWIDTH)<sp/>/<sp/><ref refid="classcamera_1a0eb2a385a0b4a41dae1249bf7507bb84" kindref="member">m_vecDistances</ref>.size();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>wallHeightFactor<sp/>=<sp/>100.0f;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcamera_1a0eb2a385a0b4a41dae1249bf7507bb84" kindref="member">m_vecDistances</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>correctedDistance<sp/>=<sp/><ref refid="classcamera_1a0eb2a385a0b4a41dae1249bf7507bb84" kindref="member">m_vecDistances</ref>[i]<sp/>*<sp/><ref refid="classcamera_1ab549fe43185366dd9c392de8c55751e0" kindref="member">cosTable</ref>[i];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sliceHeight<sp/>=<sp/>(wallHeightFactor<sp/>/<sp/>correctedDistance)<sp/>*<sp/>SCREENHEIGHT;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>halfSliceHeight<sp/>=<sp/>sliceHeight<sp/>/<sp/>2.0f;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>pitch<sp/>offset<sp/>to<sp/>simulate<sp/>looking<sp/>up/down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pitchOffset<sp/>=<sp/><ref refid="classcamera_1ad20d11e2cb7cb8d3687556405bd1bf46" kindref="member">m_pitch</ref><sp/>*<sp/>(SCREENHEIGHT<sp/>/<sp/>2.0f)<sp/>/<sp/>89.0f;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>sf::RectangleShape<sp/>slice(sf::Vector2f(sliceWidth,<sp/>sliceHeight));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yPosition<sp/>=<sp/>(SCREENHEIGHT<sp/>/<sp/>2.0f)<sp/>-<sp/>halfSliceHeight<sp/>+<sp/>pitchOffset;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>yPosition<sp/>doesn&apos;t<sp/>push<sp/>the<sp/>slice<sp/>completely<sp/>out<sp/>of<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yPosition<sp/>&gt;<sp/>SCREENHEIGHT)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yPosition<sp/>=<sp/>SCREENHEIGHT<sp/>-<sp/>sliceHeight;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yPosition<sp/>+<sp/>sliceHeight<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yPosition<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>slice.setPosition(i<sp/>*<sp/>sliceWidth,<sp/>yPosition);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxDist<sp/>=<sp/><ref refid="classcamera_1a91d570ba05593c129d7a249a84c05610" kindref="member">m_rayLength</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minColor<sp/>=<sp/>50.0f;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxColor<sp/>=<sp/>255.0f;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>colorIntensity<sp/>=</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxColor<sp/>-<sp/>((correctedDistance<sp/>/<sp/>maxDist)<sp/>*<sp/>(maxColor<sp/>-<sp/>minColor));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>red<sp/>=</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::max(minColor<sp/>/<sp/>2,<sp/>colorIntensity<sp/>*<sp/>0.8f);<sp/><sp/></highlight><highlight class="comment">//<sp/>Purple<sp/>tone<sp/>red</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>green<sp/>=</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::max(minColor<sp/>/<sp/>2,<sp/>colorIntensity<sp/>*<sp/>0.2f);<sp/><sp/></highlight><highlight class="comment">//<sp/>Less<sp/>green<sp/>for<sp/>purple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>blue<sp/>=<sp/>colorIntensity;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Full<sp/>blue<sp/>intensity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>slice.setFillColor(sf::Color(red,<sp/>green,<sp/>blue));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcamera_1a8ce590b00f15978be2ca8962b44906a5" kindref="member">m_renderWindow</ref>.draw(slice);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="classcamera_1ad7331b32ddf5cc06ca0a6c710c6202b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcamera_1ad7331b32ddf5cc06ca0a6c710c6202b8" kindref="member">camera::update</ref>()<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>sf::Time<sp/>dt<sp/>=<sp/><ref refid="classcamera_1afd6537789e1d286a9a2306c9ecd07fdd" kindref="member">m_clock</ref>.restart();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1adfc67bdf0e557f49ad780b485cdf7fbd" kindref="member">checkKeyboardHit</ref>(dt);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a52d8e786660c6892b15aaf2e27b9ea32" kindref="member">projection</ref>();</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="classcamera_1a52d8e786660c6892b15aaf2e27b9ea32" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcamera_1a52d8e786660c6892b15aaf2e27b9ea32" kindref="member">camera::projection</ref>()<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcamera_1a4fc22d5692dec58b1afe6623273ef15e" kindref="member">m_vecRays</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcamera_1a4fc22d5692dec58b1afe6623273ef15e" kindref="member">m_vecRays</ref>[i][0].position<sp/>=<sp/><ref refid="classcamera_1a947d9a37d16b0c95ac2db69e504a7b3c" kindref="member">m_position</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fAngle<sp/>=</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcamera_1a8a34963e75da04104e8f1932c6956301" kindref="member">m_angle</ref><sp/>+<sp/><ref refid="classcamera_1a49eff598e2a5120291be6f2517557b7f" kindref="member">m_fov</ref><sp/>/<sp/>2.0f<sp/>-<sp/>(i<sp/>*<sp/><ref refid="classcamera_1a49eff598e2a5120291be6f2517557b7f" kindref="member">m_fov</ref>)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SCREENWIDTH);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>sf::Vector2f<sp/>direction<sp/>=<sp/>{<ref refid="classcamera_1a67459e8e14b87a38e09be38a1c2a81cb" kindref="member">dCos</ref>(fAngle),<sp/><ref refid="classcamera_1a16579906fa90ac60ee13cb547e300f44" kindref="member">dSin</ref>(fAngle)};</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="classcamera_1a947d9a37d16b0c95ac2db69e504a7b3c" kindref="member">m_position</ref>.x;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>=<sp/><ref refid="classcamera_1a947d9a37d16b0c95ac2db69e504a7b3c" kindref="member">m_position</ref>.y;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaX<sp/>=<sp/>direction.x<sp/>*<sp/><ref refid="classcamera_1a91d570ba05593c129d7a249a84c05610" kindref="member">m_rayLength</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaY<sp/>=<sp/>direction.y<sp/>*<sp/><ref refid="classcamera_1a91d570ba05593c129d7a249a84c05610" kindref="member">m_rayLength</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>steps<sp/>=<sp/>std::max(abs(deltaX),<sp/>abs(deltaY));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xIncrement<sp/>=<sp/>deltaX<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(steps);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yIncrement<sp/>=<sp/>deltaY<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(steps);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapXPrev<sp/>=<sp/>-1,<sp/>mapYPrev<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>steps;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>xIncrement;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>yIncrement;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapX<sp/>=<sp/>x<sp/>/<sp/>blocSize;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapY<sp/>=<sp/>y<sp/>/<sp/>blocSize;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapX<sp/>==<sp/>mapXPrev<sp/>&amp;&amp;<sp/>mapY<sp/>==<sp/>mapYPrev)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapX<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>mapY<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>mapX<sp/>&lt;<sp/><ref refid="classcamera_1ab08734ecdc965f68e37978c9abd4fa6b" kindref="member">m_map</ref>.<ref refid="classmap_1ace7bafa28bae3295dab9e917bcc92665" kindref="member">getWidth</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapY<sp/>&lt;<sp/><ref refid="classcamera_1ab08734ecdc965f68e37978c9abd4fa6b" kindref="member">m_map</ref>.<ref refid="classmap_1a20b217778b82c7c2d70c852bd41e9b43" kindref="member">getHeight</ref>()<sp/>&amp;&amp;<sp/><ref refid="classcamera_1ab08734ecdc965f68e37978c9abd4fa6b" kindref="member">m_map</ref>.<ref refid="classmap_1ad78e8aa79ddc5faa496c37600151bd17" kindref="member">checkMapCase</ref>(mapX,<sp/>mapY))<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcamera_1a9b47581c719b16a39b486bf59ea89238" kindref="member">m_intersection</ref>.x<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcamera_1a9b47581c719b16a39b486bf59ea89238" kindref="member">m_intersection</ref>.y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/><ref refid="classcamera_1a947d9a37d16b0c95ac2db69e504a7b3c" kindref="member">m_position</ref>.x<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/><ref refid="classcamera_1a947d9a37d16b0c95ac2db69e504a7b3c" kindref="member">m_position</ref>.y<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcamera_1a0eb2a385a0b4a41dae1249bf7507bb84" kindref="member">m_vecDistances</ref>[i]<sp/>=<sp/>sqrt(dx<sp/>*<sp/>dx<sp/>+<sp/>dy<sp/>*<sp/>dy);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcamera_1a4fc22d5692dec58b1afe6623273ef15e" kindref="member">m_vecRays</ref>[i][1].position<sp/>=<sp/><ref refid="classcamera_1a9b47581c719b16a39b486bf59ea89238" kindref="member">m_intersection</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcamera_1a0eb2a385a0b4a41dae1249bf7507bb84" kindref="member">m_vecDistances</ref>[i]<sp/>=<sp/><ref refid="classcamera_1a91d570ba05593c129d7a249a84c05610" kindref="member">m_rayLength</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mapXPrev<sp/>=<sp/>mapX;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mapYPrev<sp/>=<sp/>mapY;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="classcamera_1adfc67bdf0e557f49ad780b485cdf7fbd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcamera_1adfc67bdf0e557f49ad780b485cdf7fbd" kindref="member">camera::checkKeyboardHit</ref>(sf::Time<sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>sf::Vector2f<sp/>direction(<ref refid="classcamera_1a67459e8e14b87a38e09be38a1c2a81cb" kindref="member">dCos</ref>(<ref refid="classcamera_1a8a34963e75da04104e8f1932c6956301" kindref="member">m_angle</ref>),<sp/><ref refid="classcamera_1a16579906fa90ac60ee13cb547e300f44" kindref="member">dSin</ref>(<ref refid="classcamera_1a8a34963e75da04104e8f1932c6956301" kindref="member">m_angle</ref>));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>sf::Vector2f<sp/>right(direction.y,<sp/>-direction.x);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf::Keyboard::isKeyPressed(sf::Keyboard::Z))<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcamera_1a947d9a37d16b0c95ac2db69e504a7b3c" kindref="member">m_position</ref><sp/>+=<sp/>direction<sp/>*<sp/><ref refid="classcamera_1a7772c72c2a9b104afe444d7fa96aa30b" kindref="member">m_speedMove</ref><sp/>*<sp/>dt.asSeconds();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf::Keyboard::isKeyPressed(sf::Keyboard::S))<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcamera_1a947d9a37d16b0c95ac2db69e504a7b3c" kindref="member">m_position</ref><sp/>-=<sp/>direction<sp/>*<sp/><ref refid="classcamera_1a7772c72c2a9b104afe444d7fa96aa30b" kindref="member">m_speedMove</ref><sp/>*<sp/>dt.asSeconds();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf::Keyboard::isKeyPressed(sf::Keyboard::Q))<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcamera_1a947d9a37d16b0c95ac2db69e504a7b3c" kindref="member">m_position</ref><sp/>-=<sp/>right<sp/>*<sp/><ref refid="classcamera_1a7772c72c2a9b104afe444d7fa96aa30b" kindref="member">m_speedMove</ref><sp/>*<sp/>dt.asSeconds();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf::Keyboard::isKeyPressed(sf::Keyboard::D))<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcamera_1a947d9a37d16b0c95ac2db69e504a7b3c" kindref="member">m_position</ref><sp/>+=<sp/>right<sp/>*<sp/><ref refid="classcamera_1a7772c72c2a9b104afe444d7fa96aa30b" kindref="member">m_speedMove</ref><sp/>*<sp/>dt.asSeconds();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>sf::Vector2i<sp/>mousePos<sp/>=<sp/>sf::Mouse::getPosition(<ref refid="classcamera_1a8ce590b00f15978be2ca8962b44906a5" kindref="member">m_renderWindow</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>diffX<sp/>=<sp/>mousePos.x<sp/>-<sp/><ref refid="classcamera_1a8ce590b00f15978be2ca8962b44906a5" kindref="member">m_renderWindow</ref>.getSize().x<sp/>/<sp/>2.f;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>diffY<sp/>=<sp/>mousePos.y<sp/>-<sp/><ref refid="classcamera_1a8ce590b00f15978be2ca8962b44906a5" kindref="member">m_renderWindow</ref>.getSize().y<sp/>/<sp/>2.f;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a8a34963e75da04104e8f1932c6956301" kindref="member">m_angle</ref><sp/>+=<sp/>-diffX<sp/>*<sp/>(<ref refid="classcamera_1aef1698bab1fa18359f60c5eeff76618a" kindref="member">m_speedAngle</ref><sp/>*<sp/>0.5f)<sp/>*<sp/>dt.asSeconds();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1ad20d11e2cb7cb8d3687556405bd1bf46" kindref="member">m_pitch</ref><sp/>-=<sp/>diffY<sp/>*<sp/>(<ref refid="classcamera_1aef1698bab1fa18359f60c5eeff76618a" kindref="member">m_speedAngle</ref><sp/>*<sp/>0.5f)<sp/>*<sp/>dt.asSeconds();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clamp<sp/>the<sp/>pitch<sp/>to<sp/>avoid<sp/>flipping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcamera_1ad20d11e2cb7cb8d3687556405bd1bf46" kindref="member">m_pitch</ref><sp/>&gt;<sp/>89.0f)<sp/><ref refid="classcamera_1ad20d11e2cb7cb8d3687556405bd1bf46" kindref="member">m_pitch</ref><sp/>=<sp/>89.0f;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcamera_1ad20d11e2cb7cb8d3687556405bd1bf46" kindref="member">m_pitch</ref><sp/>&lt;<sp/>-89.0f)<sp/><ref refid="classcamera_1ad20d11e2cb7cb8d3687556405bd1bf46" kindref="member">m_pitch</ref><sp/>=<sp/>-89.0f;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>sf::Mouse::setPosition(sf::Vector2i(<ref refid="classcamera_1a8ce590b00f15978be2ca8962b44906a5" kindref="member">m_renderWindow</ref>.getSize().x<sp/>/<sp/>2,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcamera_1a8ce590b00f15978be2ca8962b44906a5" kindref="member">m_renderWindow</ref>.getSize().y<sp/>/<sp/>2),</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcamera_1a8ce590b00f15978be2ca8962b44906a5" kindref="member">m_renderWindow</ref>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a1b7c318e23591214448c37582007b720" kindref="member">m_camera</ref>.setPosition(<ref refid="classcamera_1a947d9a37d16b0c95ac2db69e504a7b3c" kindref="member">m_position</ref>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="classcamera_1a1b7c318e23591214448c37582007b720" kindref="member">m_camera</ref>.setRotation(<ref refid="classcamera_1a8a34963e75da04104e8f1932c6956301" kindref="member">m_angle</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="classcamera_1a041e24d91fac167068dc08632d568d1d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcamera_1a041e24d91fac167068dc08632d568d1d" kindref="member">camera::intersect</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fAngle<sp/>=</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcamera_1a8a34963e75da04104e8f1932c6956301" kindref="member">m_angle</ref><sp/>+<sp/><ref refid="classcamera_1a49eff598e2a5120291be6f2517557b7f" kindref="member">m_fov</ref><sp/>/<sp/>2.0f<sp/>-<sp/>(it<sp/>*<sp/><ref refid="classcamera_1a49eff598e2a5120291be6f2517557b7f" kindref="member">m_fov</ref>)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SCREENWIDTH);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>sf::Vector2f<sp/>direction<sp/>=<sp/>{<ref refid="classcamera_1a67459e8e14b87a38e09be38a1c2a81cb" kindref="member">dCos</ref>(fAngle),<sp/><ref refid="classcamera_1a16579906fa90ac60ee13cb547e300f44" kindref="member">dSin</ref>(fAngle)};</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>0;<sp/>length<sp/>&lt;<sp/><ref refid="classcamera_1a91d570ba05593c129d7a249a84c05610" kindref="member">m_rayLength</ref>;<sp/>length++)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classcamera_1a947d9a37d16b0c95ac2db69e504a7b3c" kindref="member">m_position</ref>.x<sp/>+<sp/>length<sp/>*<sp/>direction.x);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classcamera_1a947d9a37d16b0c95ac2db69e504a7b3c" kindref="member">m_position</ref>.y<sp/>+<sp/>length<sp/>*<sp/>direction.y);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dx<sp/>/<sp/>blocSize<sp/>&lt;<sp/><ref refid="classcamera_1ab08734ecdc965f68e37978c9abd4fa6b" kindref="member">m_map</ref>.<ref refid="classmap_1ace7bafa28bae3295dab9e917bcc92665" kindref="member">getWidth</ref>()<sp/>&amp;&amp;<sp/>dy<sp/>/<sp/>blocSize<sp/>&lt;<sp/><ref refid="classcamera_1ab08734ecdc965f68e37978c9abd4fa6b" kindref="member">m_map</ref>.<ref refid="classmap_1a20b217778b82c7c2d70c852bd41e9b43" kindref="member">getHeight</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcamera_1ab08734ecdc965f68e37978c9abd4fa6b" kindref="member">m_map</ref>.<ref refid="classmap_1ad78e8aa79ddc5faa496c37600151bd17" kindref="member">checkMapCase</ref>(dx<sp/>/<sp/>blocSize,<sp/>dy<sp/>/<sp/>blocSize))<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcamera_1a9b47581c719b16a39b486bf59ea89238" kindref="member">m_intersection</ref>.x<sp/>=<sp/>dx;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcamera_1a9b47581c719b16a39b486bf59ea89238" kindref="member">m_intersection</ref>.y<sp/>=<sp/>dy;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="classcamera_1a917423b8aea58c352444880da61ae98c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classcamera_1a917423b8aea58c352444880da61ae98c" kindref="member">camera::toRadian</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(M_PI<sp/>/<sp/>180.0f)<sp/>*<sp/>deg;<sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="classcamera_1a67459e8e14b87a38e09be38a1c2a81cb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classcamera_1a67459e8e14b87a38e09be38a1c2a81cb" kindref="member">camera::dCos</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cos(<ref refid="classcamera_1a917423b8aea58c352444880da61ae98c" kindref="member">toRadian</ref>(deg));<sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="classcamera_1a16579906fa90ac60ee13cb547e300f44" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classcamera_1a16579906fa90ac60ee13cb547e300f44" kindref="member">camera::dSin</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sin(<ref refid="classcamera_1a917423b8aea58c352444880da61ae98c" kindref="member">toRadian</ref>(deg));<sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/Camera.cpp"/>
  </compounddef>
</doxygen>
