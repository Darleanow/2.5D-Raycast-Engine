<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="_map_8cpp" kind="file" language="C++">
    <compoundname>Map.cpp</compoundname>
    <includes refid="_map_8hpp" local="yes">Map.hpp</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">ctime</includes>
    <includes local="no">random</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="1">
        <label>src/Map.cpp</label>
        <link refid="_map_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Map.hpp</label>
        <link refid="_map_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>constants.hpp</label>
        <link refid="constants_8hpp_source"/>
      </node>
      <node id="3">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="6">
        <label>cstdlib</label>
      </node>
      <node id="7">
        <label>ctime</label>
      </node>
      <node id="8">
        <label>random</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Map.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="classmap_1a64a067e38ec78bc294ceae4d74951870" refkind="member"><highlight class="normal"><ref refid="classmap_1a64a067e38ec78bc294ceae4d74951870" kindref="member">map::map</ref>(sf::RenderWindow&amp;<sp/>m_renderWindow)<sp/>:<sp/>m_renderWindow(m_renderWindow)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>std::srand(std::time(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><ref refid="classmap_1a34b43c4ecce8de3a5228b7f4e6d66740" kindref="member">width</ref><sp/>=<sp/>101;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><ref refid="classmap_1a9958bc4a129d86b6e0b1b61a6ae16c41" kindref="member">height</ref><sp/>=<sp/>61;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><ref refid="classmap_1a474e50ad49a4b19d0d5bec2fbdc14b93" kindref="member">m_vecMap</ref>.resize(<ref refid="classmap_1a9958bc4a129d86b6e0b1b61a6ae16c41" kindref="member">height</ref>,<sp/>std::vector&lt;unsigned<sp/>int&gt;(<ref refid="classmap_1a34b43c4ecce8de3a5228b7f4e6d66740" kindref="member">width</ref>,<sp/>0));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/><ref refid="classmap_1a34b43c4ecce8de3a5228b7f4e6d66740" kindref="member">width</ref>;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmap_1a474e50ad49a4b19d0d5bec2fbdc14b93" kindref="member">m_vecMap</ref>[0][x]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmap_1a474e50ad49a4b19d0d5bec2fbdc14b93" kindref="member">m_vecMap</ref>[<ref refid="classmap_1a9958bc4a129d86b6e0b1b61a6ae16c41" kindref="member">height</ref><sp/>-<sp/>1][x]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/><ref refid="classmap_1a9958bc4a129d86b6e0b1b61a6ae16c41" kindref="member">height</ref>;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmap_1a474e50ad49a4b19d0d5bec2fbdc14b93" kindref="member">m_vecMap</ref>[y][0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmap_1a474e50ad49a4b19d0d5bec2fbdc14b93" kindref="member">m_vecMap</ref>[y][<ref refid="classmap_1a34b43c4ecce8de3a5228b7f4e6d66740" kindref="member">width</ref><sp/>-<sp/>1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="classmap_1aa0562fd4f241b9a146153dcca585e243" kindref="member">addObstacles</ref>(300);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="classmap_1aa0562fd4f241b9a146153dcca585e243" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmap_1aa0562fd4f241b9a146153dcca585e243" kindref="member">map::addObstacles</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>std::default_random_engine<sp/>rng(std::random_device{}());</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>std::uniform_int_distribution&lt;int&gt;<sp/>distX(1,<sp/><ref refid="classmap_1a34b43c4ecce8de3a5228b7f4e6d66740" kindref="member">width</ref><sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>std::uniform_int_distribution&lt;int&gt;<sp/>distY(1,<sp/><ref refid="classmap_1a9958bc4a129d86b6e0b1b61a6ae16c41" kindref="member">height</ref><sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>distX(rng);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>distY(rng);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classmap_1a474e50ad49a4b19d0d5bec2fbdc14b93" kindref="member">m_vecMap</ref>[y][x]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmap_1a474e50ad49a4b19d0d5bec2fbdc14b93" kindref="member">m_vecMap</ref>[y][x]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classmap_1ad78e8aa79ddc5faa496c37600151bd17" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmap_1ad78e8aa79ddc5faa496c37600151bd17" kindref="member">map::checkMapCase</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dx<sp/>&gt;=<sp/><ref refid="classmap_1a474e50ad49a4b19d0d5bec2fbdc14b93" kindref="member">m_vecMap</ref>[0].size()<sp/>||<sp/>dy<sp/>&gt;=<sp/><ref refid="classmap_1a474e50ad49a4b19d0d5bec2fbdc14b93" kindref="member">m_vecMap</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmap_1a474e50ad49a4b19d0d5bec2fbdc14b93" kindref="member">m_vecMap</ref>[dy][dx]<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classmap_1a20b217778b82c7c2d70c852bd41e9b43" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmap_1a20b217778b82c7c2d70c852bd41e9b43" kindref="member">map::getHeight</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmap_1a474e50ad49a4b19d0d5bec2fbdc14b93" kindref="member">m_vecMap</ref>.size();<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classmap_1ace7bafa28bae3295dab9e917bcc92665" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmap_1ace7bafa28bae3295dab9e917bcc92665" kindref="member">map::getWidth</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmap_1a474e50ad49a4b19d0d5bec2fbdc14b93" kindref="member">m_vecMap</ref>[0].size();<sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/Map.cpp"/>
  </compounddef>
</doxygen>
